<html>

<head>

	<!-- COOL STUFF GOES HERE -->

	<style>

		#content {
			display: flex;
			align-items: stretch;
			justify-content: flex-start;
			flex-direction: column;
		}

		fieldset {
			margin: 5px 0;
		}

		iframe {
			height: 80px;
			overflow-x: hidden;
		}

		input, label {
			width: 10em;
			display: inline-block;
		}

		input[type="color"] {
			min-width: 3em;
			width: auto;
		}

		input[name="bgblend"] {
			height: 23px;
			width: 2em;
			text-align: center;
		}

		span[name="spanBGColor"] button {
			height: 23px;
			margin-right: 5px;
		}
	</style>

	<script type="text/javascript">
<!--
		function addColor() {
			addColor(null);
		}

		function addColor(key) {
			var spans = document.getElementsByName("spanBGColor");
			if (spans) {
				var addButton = spans[spans.length - 1].nextSibling;
				var newNode = spans[spans.length - 1].cloneNode(true);
				newNode.children[0].id = key ? `bgcolor${key}` : `bgcolor${spans.length + 1}`;
				newNode.children[1].id = key ? `bgblend${key}` : `bgblend${spans.length + 1}`;
				addButton.parentNode.insertBefore(newNode, addButton);
			}
		}

		function removeColor() {
			var spans = document.getElementsByName("spanBGColor");
			if (spans)
				if (spans.length > 1)
					event.srcElement.parentElement.remove();
			renumberColors();
		}

		function renumberColors() {
			var spans = document.getElementsByName("spanBGColor");
			for (var i = 0; i < spans.length; i++) {
				var el = spans[i].firstChild;
				spans[i].children[0].id = `bgcolor${i + 1}`;
				spans[i].children[1].id = `bgblend${i + 1}`;
			}
		}
//-->
	</script>

</head>

<body>

	<div id="content">

		<h1>Configure Follower Goal</h1>
		<a href="/">Back to home</a>

		<iframe id="widgetPreview" name="widgetPreview" scrolling="no"></iframe>

		<fieldset>

			<label>Caption:</label> <input type="text" id="caption" value="Configure Me" />
			<br />
			<label>Goal:</label> <input type="text" id="goal" value="100" />
			<br />
			<label>Test Count:</label> <input type="text" id="current" value="90" />
			<br />
			<label>Empty Bg Color:</label> <input type="color" id="emptyBgColor" />
			<br />
			<div>
				<label>Fill Bar Colors:</label>
				<span name="spanBGColor">
					<input id="bgcolor1" type="color" title="Choose one or more colors for the fill bar"/>
					<input id="bgblend1" name="bgblend" value="1" title="How much of the color gets blended 0->1. Not used on the last color." />
					<button onclick="removeColor()" title="Remove this color from the list.">X</button>
				</span>
				<button type="button" onclick="addColor()" title="Add another color picker to the end of the list.">+</button>
			</div>
		</fieldset>

		<button id="preview">Preview</button>

		<p>
			Here is your URL:
			<a id="outputUrl" href="#" target="_blank"></a>
		</p>

	</div>

	<script type="text/javascript">
<!--
		(function () {

			onload();

			LoadPreview();

			document.getElementById("preview").onclick = LoadPreview;

			function LoadPreview() {

				var iframeWidth = document.getElementById("widgetPreview").clientWidth - 40;

				var urlTemplate = "/followers/goal/";
				urlTemplate += `${document.getElementById("goal").value}/`;
				urlTemplate += `${document.getElementById("caption").value}`;
				urlTemplate += `?width=${iframeWidth}`;
				urlTemplate += getBGColors(); 
				urlTemplate += getBGBlend();
				urlTemplate += `&emptyBgColor=${escape(document.getElementById("emptyBgColor").value)}`;

				document.getElementById("widgetPreview").src = urlTemplate + `&current=${document.getElementById("current").value}`
				console.log(urlTemplate);

				document.getElementById("outputUrl").textContent = urlTemplate;
				document.getElementById("outputUrl").href = urlTemplate;
				saveValues();

			};

			function onload() {

				for (var i = 0; i < localStorage.length; i++) {
					var key = localStorage.key(i);
					var item = localStorage.getItem(key);
					console.log(key,item);

					// make sure we create all the required color pickers
					if (key.substr(0, 2) == "bg") {
						if (!document.getElementById(key)) {
							addColor(i+1);
						}
					}

					var el = document.getElementById(key);
					if (el) {
						el.value = item;
					}					
				}

			}

			function saveValues() {

				localStorage.clear();

				var elements = document.getElementsByTagName("input");
				for (var el of elements) {

					console.log(`Saving value: ${el.id}: ${el.value}`);

					localStorage.setItem(el.id, el.value);

				}


			}

			// build the bgcolors parameter
			function getBGColors() {
				var spans = document.getElementsByName("spanBGColor");
				var result = "";
				if (spans) {
					for (var i = 0; i < spans.length; i++) {
						result += `,${escape(spans[i].children[0].value)}`;
					}
					result = `&bgcolors=${result.substr(1)}`;
				}
				return result;
			}

			// build the bgblend parameter
			function getBGBlend() {
				var spans = document.getElementsByName("spanBGColor");
				var result = "";
				if (spans) {
					for (var i = 0; i < spans.length; i++) {
						result += `,${spans[i].children[1].value}`;
					}
					result = `&bgblend=${result.substr(1)}`;
				}
				return result;
			}

		})();

//-->
	</script>

</body>

</html>